{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "State",
  "type": "object",
  "required": [
    "current_round",
    "expiration",
    "owner",
    "pot",
    "prng_seed"
  ],
  "properties": {
    "current_round": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "expiration": {
      "$ref": "#/definitions/Expiration"
    },
    "owner": {
      "$ref": "#/definitions/CanonicalAddr"
    },
    "pot": {
      "$ref": "#/definitions/Uint128"
    },
    "prng_seed": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CanonicalAddr": {
      "$ref": "#/definitions/Binary"
    },
    "Expiration": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "never"
          ]
        },
        {
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "Uint128": {
      "type": "string"
    }
  }
}
